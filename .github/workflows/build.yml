name: Build Binaries

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [amd64]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      - name: Debug Environment
        run: |
          echo "Python version:"
          python --version
          echo "Installed packages:"
          pip list
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          if ($Env:OS -eq "Windows_NT") { Get-ChildItem } else { ls -la }
        shell: pwsh

      - name: Build Executable
        run: |
          if ($Env:OS -eq "Windows_NT") {
            pyinstaller --onefile --distpath ./bin --name NetCalc NetCalc.py
          } else {
            pyinstaller --onefile --distpath ./bin --name NetCalc NetCalc.py
          }
        shell: pwsh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ runner.os }}-${{ matrix.arch }}
          path: ./bin/*

  linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build Executable
        run: pyinstaller --onefile --distpath ./bin --name NetCalc NetCalc.py

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-linux-arm64
          path: ./bin/*

  update-readme:
    needs: [build, linux-arm64]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main # Убедитесь, что вы клонируете правильную ветку

      - name: Get Artifact URLs
        id: artifact-urls
        run: |
          echo "windows_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/binary-windows-amd64" >> $GITHUB_ENV
          echo "linux_amd64_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/binary-ubuntu-amd64" >> $GITHUB_ENV
          echo "linux_arm64_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/binary-linux-arm64" >> $GITHUB_ENV

      - name: Update README.md
        run: |
          echo "### DOWNLOAD" > README.md
          echo "| Platform      | Download Link |" >> README.md
          echo "|---------------|---------------|" >> README.md
          echo "| Windows (x64) | [Download](${{ env.windows_url }}) |" >> README.md
          echo "| Linux (amd64) | [Download](${{ env.linux_amd64_url }}) |" >> README.md
          echo "| Linux (arm64) | [Download](${{ env.linux_arm64_url }}) |" >> README.md

      - name: Configure Git for Push
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Commit and Push Changes
        run: |
          git add README.md
          git commit -m "Update README.md with download links"
          git push origin HEAD:main

